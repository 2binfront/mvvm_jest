{"version":3,"file":"vue.js","mappings":"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","sources":["webpack://vue/./src/index.ts","webpack://vue/./src/compiler.ts","webpack://vue/./src/dep.ts","webpack://vue/./src/observer.ts","webpack://vue/./src/watcher.ts","webpack://vue/webpack/bootstrap"],"sourcesContent":["import Compiler from \"./compiler\";\r\nimport Observer from \"./observer\"\r\n\r\nexport default class Vue{\r\n    $el:HTMLElement;\r\n    $data:object;\r\n    options:{\r\n        el:string,\r\n        data:object,\r\n        methods:object\r\n    };\r\n    compile: Compiler;\r\n    obser: Observer;\r\n    constructor(options: { el: string; data: {}; methods: {}; }){\r\n        //获取元素 dom 对象\r\n        this.$el=document.querySelector(options.el);\r\n        \r\n        //转存数据\r\n        this.$data = options.data || {};\r\n\r\n        //数据和函数的代理\r\n        this._proxyData(this.$data);\r\n        this._proxyMethods(options.methods);\r\n\r\n        //数据劫持\r\n        this.obser=new Observer(this.$data);\r\n\r\n        //模板编译，页面渲染\r\n        this.compile=new Compiler(this);\r\n    }\r\n\r\n\r\n    /**\r\n     * 数据的代理，访问vue对象时代理其数据\r\n     * @param data \r\n     */\r\n    _proxyData(data: object){\r\n        Object.keys(data).forEach(key => {\r\n            Object.defineProperty(this, key, {\r\n                set(newValue){\r\n                    data[key] = newValue;\r\n                },\r\n                get(){\r\n                    return data[key];\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 对vue对象的方法的简单代理，其实就是复制\r\n     * @param methods \r\n     */\r\n    _proxyMethods(methods: { [x: string]: Function; }){\r\n        if(methods && typeof methods === \"object\"){\r\n            Object.keys(methods).forEach(key => {\r\n                this[key] = methods[key];\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nwindow['Vue']=Vue;","import Watcher from \"./watcher\";\r\n\r\n// 进行模板编译\r\nexport default class Compiler {\r\n  $el: DocumentFragment;\r\n  context: object;\r\n  $fragment: DocumentFragment;\r\n\r\n\r\n  constructor(context) {\r\n    this.$el = context.$el;\r\n    this.context = context;\r\n    if (this.$el) {\r\n      // 把dom转成文档片段\r\n      this.$fragment = this.nodeToFragment(this.$el)\r\n      console.log(this.$fragment)\r\n      // 编译模板\r\n      this.compiler(this.$fragment)\r\n\r\n      //  把文档添加到页面中\r\n      this.$el.appendChild(this.$fragment)\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 把所有元素转成文档片段\r\n   * @param {*} node \r\n   */\r\n   nodeToFragment(node){\r\n    let fragment = document.createDocumentFragment()\r\n    if (node.childNodes && node.childNodes.length) {\r\n      node.childNodes.forEach(child => {\r\n        // 判断需要的节点\r\n        // 注释或者无用的换行，不添加\r\n        if (!this.ignorable(child)) {\r\n          fragment.appendChild(child);\r\n        }\r\n      })\r\n    }\r\n    return fragment;\r\n}\r\n\r\n    /**\r\n     * 忽略不添加的节点\r\n     * @param node \r\n     */\r\n     ignorable(node) {\r\n        //正则匹配\r\n        const reg = /^[\\t\\n\\r]+/;\r\n        return (//nodeType为3或8时为文本和注释\r\n        node.nodeType === 8 || (node.nodeType === 3 && reg.test(node.textContent))\r\n        )\r\n    }\r\n\r\n    /**\r\n     * 模板编译\r\n     * @param node \r\n     */\r\n     compiler(node){\r\n        if (node.childNodes && node.childNodes.length) {\r\n            node.childNodes.forEach(child => {\r\n                //1 => element\r\n              if (child.nodeType === 1) {\r\n                this.compilerElementNode(child);\r\n                //3 => text\r\n              } else if (child.nodeType === 3) {\r\n                this.compilerTextNode(child);\r\n              }\r\n            })\r\n          }\r\n    }\r\n\r\n\r\n    /**\r\n     * 编译元素节点\r\n     * @param {*} node \r\n     */\r\n     compilerElementNode(node) {\r\n        let that = this;\r\n        let attrs = [...node.attributes];\r\n        attrs.forEach(attr => {\r\n        //解构赋值\r\n          let { name: attrName, value: attrValue } = attr;\r\n        //v- 开头的是特殊属性\r\n          if (attrName.indexOf('v-') === 0) {\r\n            let dirName = attrName.slice(2)\r\n            switch (dirName) {\r\n            \r\n            //单向绑定\r\n              case 'text':\r\n                new Watcher(attrValue, this.context, newValue => {\r\n                  node.textContent = newValue;\r\n                })\r\n                break;\r\n\r\n            //双向绑定\r\n              case 'model':\r\n                new Watcher(attrValue, this.context, newValue => {\r\n                  node.value = newValue\r\n                })\r\n                node.addEventListener('input', e => {\r\n                  that.context[attrValue] = e.target.value\r\n                }) \r\n                break;\r\n            }\r\n          }\r\n          if(attrName.indexOf('@') === 0){\r\n            this.compilerMethods(this.context, node, attrName, attrValue)\r\n          }\r\n        })\r\n        this.compiler(node);// 递归\r\n      }\r\n\r\n  /**\r\n   * 函数编译\r\n   * @param {*} scope \r\n   * @param {*} node \r\n   * @param {*} attrName \r\n   * @param {*} attrValue \r\n   */\r\n   compilerMethods(scope: object, node: { addEventListener: (arg0: any, arg1: any) => void; }, attrName: string[], attrValue: string | number){\r\n    //获取类型\r\n    let type = attrName.slice(1);\r\n\r\n    let fn = scope[attrValue];\r\n    node.addEventListener(type, fn.bind(scope));\r\n  }\r\n\r\n  /**\r\n   * 编译文本节点\r\n   * @param {*} node \r\n   */\r\n   compilerTextNode(node: { textContent: string; }) {\r\n    let text = node.textContent.trim()\r\n    if (text) {\r\n      // 把text字符串，转换为表达式\r\n      let exp = this.parseText(text)\r\n      // \r\n      console.log(exp)\r\n      //添加订阅者，计算表达式的值\r\n      // 当表达式依赖的值发生变化时\r\n      // 1.重新计算表达式的值\r\n      // 2.node.textContent赋新值\r\n      // 即可完成Model => View 的响应式\r\n      new Watcher(exp, this.context, newValue => {\r\n        node.textContent = newValue;\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 完成文本向表达式的转化\r\n   * text{{msg + 'text'}}\r\n   * \"text\"+msg+\"text\"\r\n   * \r\n   * @param text \r\n   */\r\n   parseText(text: string) {\r\n    //正则匹配\r\n        const reg = /\\{\\{(.+?)\\}\\}/g;\r\n        //分割插值表达式\r\n        let pices = text.split(reg);\r\n        \r\n        //console.log(pices);\r\n\r\n        //匹配插值表达式\r\n        let matches = text.match(reg);\r\n\r\n        //console.log(matches);\r\n        //表达式数组\r\n        let tokens = [];\r\n        pices.forEach(item => {\r\n        if (matches && matches.indexOf(\"{{\" + item + \"}}\") > -1) {\r\n            tokens.push(\"(\" + item + \")\")\r\n        } else {\r\n            tokens.push('`' + item + '`')\r\n        }\r\n        });\r\n        return tokens.join('+');\r\n    }\r\n}","export default class Dep {\r\n    subs: {};\r\n    static target: { uid: number; };\r\n    constructor() {\r\n      // 存放所有watcher\r\n      this.subs= {};\r\n    }\r\n  \r\n    addSub(target: { uid: number; }) {\r\n      this.subs[target.uid] = target;\r\n    } \r\n  \r\n    notify() {\r\n      for(let uid in this.subs) {\r\n        this.subs[uid].update()\r\n      }\r\n    }\r\n  }","import Dep from \"./dep\"\r\n\r\nexport default class Observer{\r\n    data:Object;\r\n\r\n    constructor(data: object){\r\n        \r\n        this.data = data;\r\n\r\n        //遍历对象完成所有数据的劫持\r\n        this.walk(this.data);\r\n    }\r\n\r\n    /**\r\n     * 遍历data的一层\r\n     * @param data \r\n     */\r\n    walk(data: object){\r\n        if(!data || typeof data !== \"object\"){\r\n            return;\r\n        }\r\n        Object.keys(data).forEach(key => {\r\n            this.defineReactive(data, key, data[key]);\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     * 动态设置响应数据\r\n     * @param data \r\n     * @param key \r\n     * @param value \r\n     */\r\n    defineReactive(data: Object, key: PropertyKey, value: any){\r\n        let dep = new Dep();\r\n        Object.defineProperty(data, key, {\r\n            //可遍历\r\n            enumerable: true,\r\n\r\n            //不可再配置\r\n            configurable: false,\r\n\r\n            get: ()=>{\r\n                //console.log('get');\r\n                Dep.target && dep.addSub(Dep.target);\r\n                return value;\r\n            },\r\n\r\n            set: (newValue) => {\r\n                //console.log('set');\r\n                value = newValue;\r\n                dep.notify();\r\n            }\r\n        });\r\n\r\n        //防止 data 嵌套对象，递归遍历\r\n        this.walk(value);\r\n    }\r\n}","import Dep from \"./dep\";\r\n\r\n\r\nlet $uid=0;\r\nexport default class Watcher {\r\n\r\n    exp:string;\r\n    callback:Function;\r\n    uid:number;\r\n    scope:object;\r\n    \r\n    constructor(exp: string, scope: object, callback: Function){\r\n\r\n        this.exp=exp;\r\n        this.scope=scope;\r\n        this.callback=callback;\r\n        this.uid=$uid++;\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n   * 计算表达式\r\n   */\r\n  get() {\r\n    //let newValue = Watcher.computeExpression(this.exp, this.scope);\r\n    //return newValue\r\n\r\n    Dep.target = this;\r\n    let newValue = Watcher.computeExpression(this.exp, this.scope);\r\n    Dep.target = null;\r\n    return newValue;\r\n  }\r\n\r\n  /**\r\n   * 回调函数的调用\r\n   */\r\n  update() {\r\n    let newValue = this.get()\r\n    this.callback && this.callback(newValue)\r\n  }\r\n\r\n  static computeExpression(exp: string, scope: object) {\r\n    // 创建函数\r\n    // 把scope当作作用域\r\n    // 函数内部使用with来指定作用域\r\n    // 执行函数, 得到表达式的值\r\n    let fn = new Function('scope', \"with(scope){return \" + exp + \"}\");\r\n    return fn(scope);\r\n  }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["context","this","$el","$fragment","nodeToFragment","console","log","compiler","appendChild","node","fragment","document","createDocumentFragment","childNodes","length","forEach","child","ignorable","nodeType","test","textContent","compilerElementNode","compilerTextNode","that","attributes","attr","attrName","attrValue","indexOf","slice","newValue","value","addEventListener","e","target","compilerMethods","scope","type","fn","bind","text","trim","exp","parseText","reg","pices","split","matches","match","tokens","item","push","join","subs","addSub","uid","notify","update","data","walk","Object","keys","key","defineReactive","dep","defineProperty","enumerable","configurable","get","set","$uid","callback","Watcher","computeExpression","Function","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","options","querySelector","el","$data","_proxyData","_proxyMethods","methods","obser","compile","window","Vue"],"sourceRoot":""}